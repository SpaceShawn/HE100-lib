# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = ../../../gtest-1.7.0

# Where to find user code.
USER_DIR = ../../../HE100-lib/C
TIMER_DIR = ../../../space-timer-lib
NAMEDPIPE_DIR = ../../../space-commander
FLETCHER_DIR = ../../../space-lib/checksum
SHAKES_DIR = ../../../space-lib/shakespeare
UTLS_DIR= ../../../space-lib/utls

GLOBAL_INC_DIR= ../../../space-lib/include
GLOBAL_LIB_DIR= ../../../space-lib/lib
MICROINCPATH=-I../inc/Q6/
PCINCPATH=-I../inc/PC/
INCPATH=-I../inc/ -I$(GLOBAL_INC_DIR)/

LIBPATH=-L$(GLOBAL_LIB_DIR)
LIBS=$(LIBPATH) -lshakespeare

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = he100_lib_test he100_live_radio_test

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : $(TESTS)

clean :
	rm -f $(TESTS) gtest.a gtest_main.a *.o

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

###########################

OBJECTS=Date.o fletcher.o timer.o shakespeare.o SC_he100.o
HE100_HEADERS=$(USER_DIR)/inc/SC_he100.h
SHAKESPEARE_HEADERS=$(GLOBAL_INC_DIR)/shakespeare.h 
HEADERS=$(GLOBAL_INC_DIR)/timer.h $(GLOBAL_INC_DIR)/Date.h $(GLOBAL_INC_DIR)/SpaceDecl.h 

###########################

Date.o : $(UTLS_DIR)/src/Date.cpp $(HEADERS) $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) -I$(UTLS_DIR)/include/ $(CXXFLAGS) -c $(UTLS_DIR)/src/Date.cpp

timer.o : $(TIMER_DIR)/src/timer.c $(HEADERS) $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) -I$(TIMER_DIR)/inc/ $(CXXFLAGS) -c $(TIMER_DIR)/src/timer.c

fletcher.o : $(FLETCHER_DIR)/src/fletcher.c $(HEADERS) $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(INCPATH) $(PCINCPATH) $(CXXFLAGS) -c $(FLETCHER_DIR)/src/fletcher.c

shakespeare.o : $(SHAKES_DIR)/src/shakespeare.cpp $(HEADERS) $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) -I$(SHAKES_DIR)/inc/ $(INCPATH) $(CXXFLAGS) -c $(SHAKES_DIR)/src/shakespeare.cpp

SC_he100.o : $(USER_DIR)/src/SC_he100.c $(HEADERS) $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(INCPATH) $(PCINCPATH) $(CXXFLAGS) -c $(USER_DIR)/src/SC_he100.c

he100_lib_test.o : $(USER_DIR)/test/he100_lib_test.cpp $(HEADERS) $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(INCPATH) -c $(USER_DIR)/test/he100_lib_test.cpp

he100_live_radio_test.o : $(USER_DIR)/test/he100_live_radio_test.cpp $(HEADERS) $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(INCPATH) -c $(USER_DIR)/test/he100_live_radio_test.cpp

he100_lib_test : $(OBJECTS) he100_lib_test.o $(HE100_HEADERS) gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@ -lrt

he100_live_radio_test : $(OBJECTS) he100_live_radio_test.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(INCPATH) -lpthread $^ -o $@ -lrt
